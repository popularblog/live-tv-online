<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Player</title>
    <link href="https://cdn.jsdelivr.net/npm/plyr@3.7.8/dist/plyr.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #181818;
            color: #fff;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .video-player {
            padding: 10px;
            border-radius: 10px;
            margin: 10px 0;
            background-color: #1a1a1a;
            box-shadow: 0 10px 10px rgba(0, 0, 0, 0.5);
            width: 100%;
            max-width: 790px;
            text-align: center;
        }

        video {
            width: 100%;
            height: auto;
            border-radius: 10px;
            border: 2px solid #ffffff;
        }

        .loading {
            font-size: 18px;
            color: white;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border-radius: 10px;
            display: none;
            text-align: center;
        }

        .channel-buttons {
            display: none;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 20px;
            gap: 10px;
            width: 100%;
            max-width: 800px;
        }

        .channel-link {
            background-color: #333;
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            transition: all 0.3s ease;
            text-decoration: none;
            overflow: hidden;
        }

        .channel-link img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
        }

        .channel-link:hover {
            background-color: #4CAF50;
            transform: scale(1.05);
        }

        @media (max-width: 600px) {
            .channel-link {
                width: 80px;
                height: 80px;
            }
            
            .channel-link img {
                width: 60px;
                height: 60px;
            }
        }
    </style>
</head>
<body>
    <div class="video-player">
        <div class="loading" id="videoLoading">Loading video...</div>
        <video id="videoPlayer" controls playsinline></video>
    </div>
    
    <div class="loading" id="channelLoading">Loading channels...</div>
    <div class="channel-buttons" id="channelList"></div>

    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.5.0/dist/hls.min.js"></script>
    <script>
        const video = document.getElementById('videoPlayer');
        const videoLoading = document.getElementById('videoLoading');
        const channelLoading = document.getElementById('channelLoading');
        const channelList = document.getElementById('channelList');
        let hls = null;

        // Show loading states initially
        videoLoading.style.display = 'block';
        channelLoading.style.display = 'block';

        // Load demo video when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            const demoVideoUrl = 'https://zjdmi53knyt.a.trbcdn.net/dazn1/index.m3u8';
            loadVideo(demoVideoUrl);
            loadChannels();
        });

        function loadVideo(sourceUrl) {
            if (Hls.isSupported()) {
                if (hls) {
                    hls.destroy();
                }
                hls = new Hls();
                hls.loadSource(sourceUrl);
                hls.attachMedia(video);
                hls.on(Hls.Events.MANIFEST_PARSED, function() {
                    video.play();
                });
            } else if (video.canPlayType('application/vnd.apple.mpegurl')) {
                video.src = sourceUrl;
                video.addEventListener('loadedmetadata', function() {
                    video.play();
                });
            }
            
            video.addEventListener('waiting', function() {
                videoLoading.style.display = 'block';
            });

            video.addEventListener('playing', function() {
                videoLoading.style.display = 'none';
            });
        }

        function loadChannels() {
            fetch('https://raw.githubusercontent.com/abusaeeidx/Ayna-Playlists-free-Version/main/playlist.m3u')
                .then(response => response.text())
                .then(data => {
                    const lines = data.split('\n');
                    const channels = [];
                    let currentChannel = {};

                    lines.forEach(line => {
                        if (line.startsWith('#EXTINF')) {
                            const logoMatch = line.match(/tvg-logo="(.*?)"/);
                            const nameMatch = line.match(/,(.*)/);
                            if (logoMatch && nameMatch) {
                                currentChannel = {
                                    logo: logoMatch[1],
                                    name: nameMatch[1].trim()
                                };
                            }
                        } else if (line.startsWith('http') && currentChannel.logo) {
                            currentChannel.url = line.trim();
                            channels.push(currentChannel);
                            currentChannel = {};
                        }
                    });

                    channels.forEach(channel => {
                        const channelButton = document.createElement('a');
                        channelButton.href = "#";
                        channelButton.classList.add('channel-link');
                        channelButton.title = channel.name;
                        channelButton.setAttribute('data-link', channel.url);

                        const logoImg = document.createElement('img');
                        logoImg.src = channel.logo || 'https://via.placeholder.com/80';
                        logoImg.alt = channel.name + ' Logo';
                        logoImg.loading = "lazy";

                        channelButton.appendChild(logoImg);
                        channelList.appendChild(channelButton);
                    });

                    // Hide loading and show channels
                    channelLoading.style.display = 'none';
                    channelList.style.display = 'flex';

                    // Add click handlers to channel links
                    document.querySelectorAll('.channel-link').forEach(link => {
                        link.addEventListener('click', function(e) {
                            e.preventDefault();
                            const newSource = this.getAttribute('data-link');
                            videoLoading.style.display = 'block';
                            loadVideo(newSource);
                        });
                    });
                })
                .catch(error => {
                    console.error('Error loading channels:', error);
                    channelLoading.textContent = 'Error loading channels. Please try again later.';
                });
        }
    </script>
</body>
</html>
